//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Inputs/MultimeterInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MultimeterInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MultimeterInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MultimeterInputs"",
    ""maps"": [
        {
            ""name"": ""Regulator"",
            ""id"": ""0208738a-0063-4f76-8663-cd2d6ea7740f"",
            ""actions"": [
                {
                    ""name"": ""MouseScrollY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ac805790-8b84-4bdd-84db-2dc2171c3385"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c7bdf78b-07ed-442e-a249-fc1a1713e1d9"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""MouseScrollY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse"",
            ""bindingGroup"": ""Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Regulator
        m_Regulator = asset.FindActionMap("Regulator", throwIfNotFound: true);
        m_Regulator_MouseScrollY = m_Regulator.FindAction("MouseScrollY", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Regulator
    private readonly InputActionMap m_Regulator;
    private IRegulatorActions m_RegulatorActionsCallbackInterface;
    private readonly InputAction m_Regulator_MouseScrollY;
    public struct RegulatorActions
    {
        private @MultimeterInputs m_Wrapper;
        public RegulatorActions(@MultimeterInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseScrollY => m_Wrapper.m_Regulator_MouseScrollY;
        public InputActionMap Get() { return m_Wrapper.m_Regulator; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RegulatorActions set) { return set.Get(); }
        public void SetCallbacks(IRegulatorActions instance)
        {
            if (m_Wrapper.m_RegulatorActionsCallbackInterface != null)
            {
                @MouseScrollY.started -= m_Wrapper.m_RegulatorActionsCallbackInterface.OnMouseScrollY;
                @MouseScrollY.performed -= m_Wrapper.m_RegulatorActionsCallbackInterface.OnMouseScrollY;
                @MouseScrollY.canceled -= m_Wrapper.m_RegulatorActionsCallbackInterface.OnMouseScrollY;
            }
            m_Wrapper.m_RegulatorActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseScrollY.started += instance.OnMouseScrollY;
                @MouseScrollY.performed += instance.OnMouseScrollY;
                @MouseScrollY.canceled += instance.OnMouseScrollY;
            }
        }
    }
    public RegulatorActions @Regulator => new RegulatorActions(this);
    private int m_MouseSchemeIndex = -1;
    public InputControlScheme MouseScheme
    {
        get
        {
            if (m_MouseSchemeIndex == -1) m_MouseSchemeIndex = asset.FindControlSchemeIndex("Mouse");
            return asset.controlSchemes[m_MouseSchemeIndex];
        }
    }
    public interface IRegulatorActions
    {
        void OnMouseScrollY(InputAction.CallbackContext context);
    }
}
